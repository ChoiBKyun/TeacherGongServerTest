

**************** Git 사용법 (생활코딩) ****************

********** 0. work-flow

git은 3가지의 컴포넌트를 가지고 있음

* work-tree
- work-tree는 working directory라고도 불리며 현재 작업중인 디렉토리에 들어있는 수정가능하며 읽을 수 있는 모든 파일이 들어 있는 컴포넌트라고 생각하면 됨

* index
- index는 staging area라고 불리며 commit 되기전 준비단계가 보존되는 컴포넌트임. index는 work-tree에 있는 file중 변경되어져 commit 되어질 파일들이 모여있는 컴포넌트임
- work-tree에 있는 file중 한 파일을 변경 한다면 index 컴포넌트에서 수정되었다는 마크처리를 해줌


* repository
- 레포지토리는 컨테이너라고도 불림. 해당 컴포넌트는 프로젝트 파일들의 변화를 축적함
- 모든 커밋의 history를 snpashot의 형태로 가지고 있음
- git log 명령어를 통해서 commit history를 확인할 수 있음


** add 명령어로 work-tree의 file을 index로 가져올 수 있고 commit을 통해 index에 있는 파일들을 repository로 넣을 수 있음. 그리고 reset을 통해 거꾸로 돌릴수도 있음.



********** 1. 버전을 생성하는 방법

1) git bash 실행

2) 버전 관리할 폴더로 이동
- 명령어 : cd /폴더

3) 버전관리할 파일을 생성

4) start a working area (clone / init)
   : init (Create an empty Git repository or reinitialize an existing one)
- 명령어 : git init
- 명령어를 치고 나면 디렉토리 안에 .git이라는 디렉토리가 생성됨
  (.git은 버전관리를 하게 되면 여러가지 정보들이 생성이 되는데, 생성된 정보는 이 디렉토리에 저장이 됨)
- working area를 생성하는 방법이 2가지 있는데, 하나는 git init이고 하나는 git clone <git 주소> <폴더명>이다.


5) 명령어 : git status  
              (생성된 파일이 untracked file이라고 나옴. 버전관리할 파일에 포함되지 않았다는 의미)

6) 명령어 : git add 파일명.확장자
              (깃에게 이 파일을 관리해라고 명령하여 해당 파일을 commit 대기상태로 만들어 줌,
               untracked file이 Changes to be committed로 바뀜)
   명령어 : git add --all 또는 git add * 
             (모든 파일을 올릴수 있음)

7) 명령어 : git config --global user.name bkchoi(닉네임 또는 이름)
              (버전에 누가 만들었는지 정보를 포함해 줌, 한번만 작성해주면 됨)

8) 명령어 : git config --global user.email amiableonek@naver.com(이메일)
              (버전에 누가 만들었는지 정보를 포함해 줌, 한번만 작성해주면 됨)           

9) 명령어 : git commit
              (git add를 통해서 대상 파일을 commit 대기 상태인 stage로 올려놓고, git commit을 통해서 해당       
              파일을 repository로 저장함)
              (하단에 보면 지금 어떤 상태에 있는지 그 status를 보여줌, 여기에다가 이제 현재 버전의 메세지를 적음
               어떤 변화가 발생했는지를 적어줌)

-> i 누르면 입력할 수 있는 상태가 됨. 여기에서 commit 메시지를 적어주고 exc키를 누르면 다시 입력할 수 없는 상태가 됨
-> 여기서 :을 누르고 wq(저장하고 종료한다)를 치고 엔터를 치면 아래와 같은 메세지가 뜸

    명령어 : git commit -m '<message>'
              위 복잡한 과정 없이 한줄로 처리 할 수 있음


========================================
$ git commit
[master (root-commit) c51beca] 1
 1 file changed, 16 insertions(+)
 create mode 100644 git_study_220814.txt
========================================


10) 명령어 : git log
               (아래와 같이 버전 정보를 보여줌)

     명령어 : git log reverse
                (버전정보를 반대로 처음부터 보여줌)

========================================
commit c51beca4a29664c289e9116075843933e0f47f26 (HEAD -> master)
Author: bkchoi <amiableonek@naver.com>
Date:   Sun Aug 14 15:06:36 2022 +0900

    1
========================================



11) 명령어 : cat 파일명.확장자
               (파일 안에 내용을 볼 수 있음)


12) 다시 commit을 하려면 6번 부터 다시 실행하면 됨





********** 2. 변경사항(차이점)을 확인하기(log & diff)

* 명령어 : git log -p 
             (이전버전 코드와 차이점을 확인할 수 있음)


* 명령어 : git diff <commit1 message>..<commit2 message>
             (commit1과 commit2의 차이점을 알려줌)



********** 3. 과거로 돌아가기 <reset / revert>

* 명령어 : git reset <commit message> --hard
            (선택한 commit으로 돌아가고 그 이후는 모두 보이지 
            않는다. 삭제된 것처럼 보이지만 실제로는 삭제되지
            않았고, 나중에 복구할 수 있다. 다만 공유한 이후에는
            절대로 reset하면 안된다. 내 Local 버전내에서만 reset
            해야한다.)

* 명령어 : git reset <commit message> --soft
             (commit된 수정내용이 index에 들가있는 상태가 됨
              - Head와 master가 가리키는 commit 변경)

* 명령어 : git reset <commit message> --mixed
             (commit된 수정내용이 work-tree에 들어가있는 상태가
             됨 - Head와 master가 가리키는 commit 변경, 변경된
             Head에 있는 내용 index에 가져오기)



********** 4. git hub



(1) 원격저장소를 만들고, 그리고 복제를 해서 local 저장소를 만들어서 local 저장소에서 작업을 하는 방식

  1) git init
  2) git add README.md
  3) git commit -m "first commit"
  4) git branch -M main
  5) git remote add origin https://<토큰>@github.com/ChoiBKyun/TeacherGongServerTest.git
  6) git push -u origin main



(2) 이미 Local 저장소에서 작업을 해왔고, 그 상태에서 원격저장소로 작업 내용을 올려서 작업을 하는 방식

  1) git remote add origin https://<토큰>@github.com/ChoiBKyun/TeacherGongServerTest.git
  (Local 저장소와 원격저장소를 연결시킨다. 그리고 origin은 git 주소가 기니까 기억하기 어려우므로 별명을 origin이라고 지어주는 것)
  (잘 연결됐는지 확인하려면 git remote라고 치고 엔터를 누르면 origin이라고 뜨면 잘된것임)
  (git remote -v를 치면 상세보기가 된다)

  2) git branch -M main

  3) git push -u origin main
     (push는 내 Local 저장소에서 원격 저장소로 작업파일을 보낸다는 의미)
     (위 git주소의 main 브랜치로 push한다)
     (-u는 한번만 쓰면 됨. 다음부터는 gi push만 해도 자동으로 연결됨)

  4) 그 다음에 다시 push할 때에는 
     1. git add 파일명.확장자(또는 git add --all) 하고
     2. git commit -m '<메시지>' 하고
     3. git push만 치고 엔터누르면 됨


(3) 다른 컴퓨터에서 해당 코딩을 하려면

* Clone 명령어 : git clone <git 주소> <폴더명>
                    (위 폴더명에 위 git 주소의 코드가 복사됨)
                   ex) git clone https://github.com/git/git.git.git gitsrc

                    git clone <git 주소> .
                    (폴더명 대시 .을 치면 현재 폴더에 복사됨)


(4) 하나의 원격저장소와 두개의 Local 저장소가 동기화하는 방법
    (협업 프로젝트 할때)

  1) clone해서 코드 복사
  2) 작업한 후 push
  3) 다른 컴퓨터에서 pull
     git pull origin main






###############################################################


* 참고 사이트
https://sabarada.tistory.com/71


* git 계정 정보

git id : espatium.bk@gmail.com
git pwd : choi6014#
git acess tokens : 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























